import { useEffect, useState } from "react";
import { Button, Dialog, DialogActions, DialogContent, DialogTitle, TextField, Divider } from "@mui/material";
import MDBox from "components/MDBox";
import MDTypography from "components/MDTypography";
import MDBadge from "components/MDBadge";
import EventService from "services/event-service";

export default function data() {
  const [events, setEvents] = useState([]);
  const [openDialog, setOpenDialog] = useState(false);

  const [formData, setFormData] = useState({
    name: "",
    date_time: "",
    duration: "",
    location: "",
    capacity: "",
    waitlist_capacity: "",
    status: "draft",
  });
  const [editingEventId, setEditingEventId] = useState(null);

  const token = localStorage.getItem("token");

  useEffect(() => {
    const fetchEvents = async () => {
      try {
        const data = await EventService.getEvents(token);
        setEvents(data);
      } catch (error) {
        console.error("Error fetching events:", error);
      }
    };

    fetchEvents();
  }, [token]);

  const Job = ({ title }) => (
    <MDBox lineHeight={1} textAlign="left">
      <MDTypography display="block" variant="caption" color="text" fontWeight="medium">
        {title}
      </MDTypography>
    </MDBox>
  );

  const handleOpenDialog = (event = null) => {
    console.log(event);
    if (event) {
      setFormData({ ...event });
      setEditingEventId(event.id);
    } else {
      setFormData({
        name: "",
        date_time: "",
        duration: "",
        location: "",
        capacity: "",
        waitlist_capacity: "",
        status: "draft",
      });
      setEditingEventId(null);
    }
    setOpenDialog(true);
  };

  const handleSubmit = async () => {
    try {
      if (editingEventId) {
        await EventService.updateEvent(token, editingEventId, formData);
      } else {
        await EventService.createEvent(token, formData);
      }

      const updatedEvents = await EventService.getEvents(token);
      setEvents(updatedEvents);
      setOpenDialog(false);
    } catch (error) {
      console.error("Error saving event:", error);
    }
  };

  const handleDelete = async (eventId) => {
    try {
      await EventService.deleteEvent(token, eventId);
      setEvents(events.filter((event) => event.id !== eventId));
    } catch (error) {
      console.error("Error deleting event:", error);
    }
  };

  return {
    columns: [
      { Header: "name", accessor: "name", width: "45%", align: "left" },
      { Header: "date", accessor: "date", align: "left" },
      { Header: "duration", accessor: "duration", align: "center" },
      { Header: "location", accessor: "location", align: "center" },
      { Header: "capacity", accessor: "capacity", align: "center" },
      { Header: "waitlist", accessor: "waitlist_capacity", align: "center" },
      { Header: "status", accessor: "status", align: "center" },
      { Header: "action", accessor: "action", align: "center" },
    ],

    rows: events.map((event) => ({
      name: <Job title={event.name} />,
      date: <MDTypography variant="caption" color="text" fontWeight="medium">{event.date_time}</MDTypography>,
      duration: <Job title={event.duration} />,
      location: <Job title={event.location} />,
      capacity: <Job title={event.capacity} />,
      waitlist_capacity: <Job title={event.waitlist_capacity} />,
      status: (
        <MDBox ml={-1}>
          <MDBadge
            badgeContent={event.status === "published" ? "live" : "draft"}
            color={event.status === "published" ? "success" : "secondary"}
            variant="gradient"
            size="sm"
          />
        </MDBox>
      ),
      action: (
        <MDBox display="flex" alignItems="center" lineHeight={1}>
          <MDTypography
            component="a"
            href="#"
            variant="caption"
            color="text"
            fontWeight="medium"
            onClick={(e) => {
              e.preventDefault();
              handleOpenDialog(event);
            }}
          >
            Edit
          </MDTypography>
          <Divider orientation="vertical" flexItem sx={{ mx: 1 }} />
          <MDTypography
            component="a"
            href="#"
            variant="caption"
            color="text"
            fontWeight="medium"
            onClick={() => handleDelete(event.id)}
          >
            Delete
          </MDTypography>
        </MDBox>
      ),
    })),

    dialogForm: (
      <Dialog open={openDialog} onClose={() => setOpenDialog(false)}>
        <DialogTitle>{editingEventId ? "Edit Event" : "Create Event"}</DialogTitle>
        <DialogContent>
          <TextField label="Name" fullWidth margin="dense" value={formData.name} onChange={(e) => setFormData({ ...formData, name: e.target.value })} />
          <TextField label="Date Time" fullWidth margin="dense" type="datetime-local" value={formData.date_time} onChange={(e) => setFormData({ ...formData, date_time: e.target.value })} />
          {/* Add other fields similarly */}
        </DialogContent>
        <DialogActions>
          <Button onClick={() => setOpenDialog(false)}>Cancel</Button>
          <Button onClick={handleSubmit}>{editingEventId ? "Update" : "Create"}</Button>
        </DialogActions>
      </Dialog>
    ),
  };
}
